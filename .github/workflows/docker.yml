name: Build & Push Docker

on:
  push:
    branches: [ main, feat/* ]
    tags: [ 'v*' ]           # 태그 푸시 시 버전 태깅도 지원 (선택)
  workflow_dispatch: {}

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      short_sha: ${{ steps.vars.outputs.SHORT_SHA }}
      image_url: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }} # docker.io/journey1019/depromeet-team3

    env:
      # 레지스트리/리포는 Secrets로 주입 (Docker Hub 예시)
      # REGISTRY=docker.io
      # IMAGE_REPO=<dockerhub-id>/<repo>
      REGISTRY: ${{ vars.REGISTRY }}
      IMAGE_REPO: ${{ vars.IMAGE_REPO }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}
          # 태그 정책:
          # - main 브랜치: latest
          # - 모든 커밋: sha-<7자리>
          # - 태그 이벤트(v*): 그 태그 이름으로도 푸시
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=sha-${{ steps.vars.outputs.SHORT_SHA }}
            type=ref,event=tag

      - name: Build & Push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

#          cache-from: typcorepack prepare pnpm@pnpm@10.15e=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}:cache
#          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}:cache,mode=max

      - name: Show image digest
        run: echo "Pushed digest ${{ steps.build.outputs.digest }}"


  deploy-dev:
    name: Deploy to DEV (self-hosted)
    needs: docker
    runs-on: [self-hosted, Linux, X64]   # ← 기본 라벨로 매칭
    if: startsWith(github.ref, 'refs/heads/feat/')
    env:
      IMAGE: ${{ needs.docker.outputs.image_url }}:sha-${{ needs.docker.outputs.short_sha }}
      PROJECT_DIR: ${{ secrets.DEV_PROJECT_DIR }}   # 예: /srv/momuzzi
      REGISTRY: ${{ vars.REGISTRY }}
    steps:
      - name: Docker login
        run: echo '${{ secrets.REGISTRY_PASSWORD }}' | docker login "$REGISTRY" -u '${{ secrets.REGISTRY_USER }}' --password-stdin
      - name: Deploy with compose
        run: |
          set -Eeuo pipefail
          test -f "$PROJECT_DIR/deploy/compose.yaml" || { echo "compose.yaml not found"; exit 1; }
          cd "$PROJECT_DIR"
          IMAGE='${{ env.IMAGE }}' docker compose -f deploy/compose.yaml pull web
          IMAGE='${{ env.IMAGE }}' docker compose -f deploy/compose.yaml up -d web
          sleep 2
          curl -fsS http://127.0.0.1:3000 >/dev/null && echo "Health OK" || (docker logs web --tail=200 && exit 1)


  deploy-prod:
    name: Deploy to PROD (self-hosted)
    needs: docker
    runs-on: [self-hosted, Linux, X64]   # prod에도 서버에 러너가 있다면 동일
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      IMAGE: ${{ needs.docker.outputs.image_url }}:sha-${{ needs.docker.outputs.short_sha }}
      PROJECT_DIR: ${{ secrets.PROD_PROJECT_DIR }}
      REGISTRY: ${{ vars.REGISTRY }}
    steps:
      - name: Docker login
        run: echo '${{ secrets.REGISTRY_PASSWORD }}' | docker login "$REGISTRY" -u '${{ secrets.REGISTRY_USER }}' --password-stdin
      - name: Deploy with compose
        run: |
          set -Eeuo pipefail
          test -f "$PROJECT_DIR/deploy/compose.yaml" || { echo "compose.yaml not found"; exit 1; }
          cd "$PROJECT_DIR"
          IMAGE='${{ env.IMAGE }}' docker compose -f deploy/compose.yaml pull web
          IMAGE='${{ env.IMAGE }}' docker compose -f deploy/compose.yaml up -d web
          sleep 2
          curl -fsS http://127.0.0.1:3000 >/dev/null && echo "Health OK" || (docker logs web --tail=200 && exit 1)